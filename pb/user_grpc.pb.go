// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_RegisterUser_FullMethodName       = "/user.UserService/RegisterUser"
	UserService_LoginUser_FullMethodName          = "/user.UserService/LoginUser"
	UserService_GetUserInfo_FullMethodName        = "/user.UserService/GetUserInfo"
	UserService_UpdateAddressBook_FullMethodName  = "/user.UserService/UpdateAddressBook"
	UserService_SendLoginCode_FullMethodName      = "/user.UserService/SendLoginCode"
	UserService_LoginByCode_FullMethodName        = "/user.UserService/LoginByCode"
	UserService_DeleteUserAccount_FullMethodName  = "/user.UserService/DeleteUserAccount"
	UserService_RestoreUserAccount_FullMethodName = "/user.UserService/RestoreUserAccount"
	UserService_GetUserIDByJWT_FullMethodName     = "/user.UserService/GetUserIDByJWT"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 用户注册：输入注册信息，返回注册结果
	RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 用户登录：输入用户名密码，返回登录 token
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获取用户信息：根据 user_id 返回详细信息
	GetUserInfo(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserInfo, error)
	// 更新用户地址簿：发送更新地址簿请求，返回通用响应
	UpdateAddressBook(ctx context.Context, in *AddressBookUpdateRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// 发送登录验证码：发送验证码请求，返回通用响应
	SendLoginCode(ctx context.Context, in *LoginCodeRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// 使用验证码登录：响应复用已有 LoginResponse
	LoginByCode(ctx context.Context, in *LoginByCodeRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 注销账号：发送查询用户信息请求，返回通用响应，这里用的是软删除机制
	// 即不清空数据库的记录被查，仅使用bool逻辑，让软删除的账户无法查询，更新数据库
	DeleteUserAccount(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// 恢复已注销的账号：发送恢复用户请求，返回通用响应
	RestoreUserAccount(ctx context.Context, in *UserRestoreRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	// jwt拦截器测试接口
	GetUserIDByJWT(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserIDResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserService_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserService_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateAddressBook(ctx context.Context, in *AddressBookUpdateRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateAddressBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendLoginCode(ctx context.Context, in *LoginCodeRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, UserService_SendLoginCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginByCode(ctx context.Context, in *LoginByCodeRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserService_LoginByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserAccount(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RestoreUserAccount(ctx context.Context, in *UserRestoreRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, UserService_RestoreUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserIDByJWT(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserIDResponse, error) {
	out := new(UserIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserIDByJWT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// 用户注册：输入注册信息，返回注册结果
	RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 用户登录：输入用户名密码，返回登录 token
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	// 获取用户信息：根据 user_id 返回详细信息
	GetUserInfo(context.Context, *UserIDRequest) (*UserInfo, error)
	// 更新用户地址簿：发送更新地址簿请求，返回通用响应
	UpdateAddressBook(context.Context, *AddressBookUpdateRequest) (*GenericResponse, error)
	// 发送登录验证码：发送验证码请求，返回通用响应
	SendLoginCode(context.Context, *LoginCodeRequest) (*GenericResponse, error)
	// 使用验证码登录：响应复用已有 LoginResponse
	LoginByCode(context.Context, *LoginByCodeRequest) (*LoginResponse, error)
	// 注销账号：发送查询用户信息请求，返回通用响应，这里用的是软删除机制
	// 即不清空数据库的记录被查，仅使用bool逻辑，让软删除的账户无法查询，更新数据库
	DeleteUserAccount(context.Context, *UserIDRequest) (*GenericResponse, error)
	// 恢复已注销的账号：发送恢复用户请求，返回通用响应
	RestoreUserAccount(context.Context, *UserRestoreRequest) (*GenericResponse, error)
	// jwt拦截器测试接口
	GetUserIDByJWT(context.Context, *Empty) (*UserIDResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *UserIDRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) UpdateAddressBook(context.Context, *AddressBookUpdateRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressBook not implemented")
}
func (UnimplementedUserServiceServer) SendLoginCode(context.Context, *LoginCodeRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginCode not implemented")
}
func (UnimplementedUserServiceServer) LoginByCode(context.Context, *LoginByCodeRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByCode not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserAccount(context.Context, *UserIDRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAccount not implemented")
}
func (UnimplementedUserServiceServer) RestoreUserAccount(context.Context, *UserRestoreRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUserAccount not implemented")
}
func (UnimplementedUserServiceServer) GetUserIDByJWT(context.Context, *Empty) (*UserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByJWT not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterUser(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateAddressBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressBookUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateAddressBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateAddressBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateAddressBook(ctx, req.(*AddressBookUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendLoginCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendLoginCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendLoginCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendLoginCode(ctx, req.(*LoginCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginByCode(ctx, req.(*LoginByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserAccount(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RestoreUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RestoreUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RestoreUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RestoreUserAccount(ctx, req.(*UserRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserIDByJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserIDByJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserIDByJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserIDByJWT(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateAddressBook",
			Handler:    _UserService_UpdateAddressBook_Handler,
		},
		{
			MethodName: "SendLoginCode",
			Handler:    _UserService_SendLoginCode_Handler,
		},
		{
			MethodName: "LoginByCode",
			Handler:    _UserService_LoginByCode_Handler,
		},
		{
			MethodName: "DeleteUserAccount",
			Handler:    _UserService_DeleteUserAccount_Handler,
		},
		{
			MethodName: "RestoreUserAccount",
			Handler:    _UserService_RestoreUserAccount_Handler,
		},
		{
			MethodName: "GetUserIDByJWT",
			Handler:    _UserService_GetUserIDByJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
